/*
 * mainFrame.java
 *
 * Created on June 10, 2008, 8:24 PM
 */

package rpcclient;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.xmlrpc.XmlRpcException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

/**
 *
 * @author  dombesz
 */
public class mainFrame extends javax.swing.JFrame {
    public static DefaultTableModel model,tables,model1;
    public static String query="";
    public static Vector columns,colType,colAutoinc,colIsnull,colLength;
    private String currentTable="";
    public boolean isValidating=false;
   
    /** Creates new form mainFrame */
    public mainFrame() {
        //model=getXmlToJTable();
        //loadContentTable();
        
        //loadContentTable();
        
        initComponents();
        setConnected(false);
        //jPanel1.setVisible(false);
        svSettings.setVisible(false);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(tables);
        jSplitPane2 = new javax.swing.JSplitPane();
        dbControl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(model);
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable(tables);
        jSplitPane4 = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable(model1);
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        sqlCommand = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        svSettings = new javax.swing.JPanel();
        svIp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        svPort = new javax.swing.JTextField();
        svOk = new javax.swing.JButton();
        svCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        svSchema = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XML-RPC CLient");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setEnabled(false);

        jTabbedPane1.setAutoscrolls(true);

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(100, 31));

        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable2.setColumnSelectionAllowed(true);
        jTable2.setMinimumSize(new java.awt.Dimension(100, 0));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jSplitPane2.setDividerLocation(601);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(1);
        jSplitPane2.setEnabled(false);

        javax.swing.GroupLayout dbControlLayout = new javax.swing.GroupLayout(dbControl);
        dbControl.setLayout(dbControlLayout);
        dbControlLayout.setHorizontalGroup(
            dbControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 490, Short.MAX_VALUE)
        );
        dbControlLayout.setVerticalGroup(
            dbControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(dbControl);

        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setRequestFocusEnabled(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jSplitPane2.setLeftComponent(jScrollPane1);

        jSplitPane1.setRightComponent(jSplitPane2);

        jTabbedPane1.addTab("Simple View", jSplitPane1);

        jSplitPane3.setDividerLocation(100);
        jSplitPane3.setMinimumSize(new java.awt.Dimension(100, 31));

        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable3.setColumnSelectionAllowed(true);
        jTable3.setMinimumSize(new java.awt.Dimension(100, 0));
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jSplitPane3.setLeftComponent(jScrollPane3);

        jSplitPane4.setDividerLocation(180);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setMinimumSize(new java.awt.Dimension(100, 160));

        jTable4.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable4.setRequestFocusEnabled(false);
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jSplitPane4.setLeftComponent(jScrollPane4);

        sqlCommand.setColumns(20);
        sqlCommand.setRows(5);
        jScrollPane5.setViewportView(sqlCommand);

        jButton1.setText("Execute!");
        jButton1.setMaximumSize(new java.awt.Dimension(91, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(91, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(91, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Dump to Xml");
        jButton2.setAlignmentX(0.5F);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jSplitPane4.setBottomComponent(jPanel2);

        jSplitPane3.setRightComponent(jSplitPane4);

        jTabbedPane1.addTab("Advanced View", jSplitPane3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );

        svSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Connection Settings", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        svSettings.setAutoscrolls(true);
        svSettings.setOpaque(false);

        svIp.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        svIp.setToolTipText("The Server's Hostname (Can be domain name or ip adress)");

        jLabel2.setText("Port");

        svPort.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        svPort.setToolTipText("The Server's Port");

        svOk.setText("Ok");
        svOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                svOkActionPerformed(evt);
            }
        });

        svCancel.setText("Cancel");
        svCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                svCancelActionPerformed(evt);
            }
        });

        jLabel1.setText("Hostname");

        jLabel3.setText("Xsd Path");

        svSchema.setToolTipText("Cant be a web adress, or a local path.");

        jLabel4.setText("Use Validation");

        javax.swing.GroupLayout svSettingsLayout = new javax.swing.GroupLayout(svSettings);
        svSettings.setLayout(svSettingsLayout);
        svSettingsLayout.setHorizontalGroup(
            svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(svSettingsLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(svSettingsLayout.createSequentialGroup()
                        .addComponent(svOk, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(svCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(svSettingsLayout.createSequentialGroup()
                        .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(svSettingsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(23, 23, 23))
                            .addGroup(svSettingsLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(svSchema, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(svPort, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(svIp, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox1))
                        .addGap(55, 55, 55))))
        );
        svSettingsLayout.setVerticalGroup(
            svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(svSettingsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(svSettingsLayout.createSequentialGroup()
                        .addComponent(svIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(svPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(svSchema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(svSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(svOk)
                    .addComponent(svCancel))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jMenu3.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Connect");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Disconnect");
        jMenuItem4.setEnabled(false);
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Edit");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Settings");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(svSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(svSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void svCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_svCancelActionPerformed
        // TODO add your handling code here:
        svSettings.setVisible(false);
        jPanel1.setVisible(true);
    }//GEN-LAST:event_svCancelActionPerformed

    private void svOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_svOkActionPerformed
        // TODO add your handling code here:
        saveCLProperties();
    }//GEN-LAST:event_svOkActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        showCLSettings();
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        
        String selected=tables.getValueAt(jTable2.getSelectedRow(), 0).toString();
        //System.out.print(tables.getValueAt(jTable2.getSelectedRow(), 0).toString());
        model=loadContentTable(selected);
        jTable1.setModel(model);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            
            rpcClient.initRpcClient(rpcClient.host, rpcClient.port);//GEN-LAST:event_jMenuItem1ActionPerformed
            setConnected(true);
            loadListTable();
        
        } catch (MalformedURLException ex) {
            
           JOptionPane.showMessageDialog(jTabbedPane1,"Could Not Connect!!\n Please check connection settings!");
        }
    }
            private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
                // TODO add your handling code here:
                
                setValuesToEdit();
                
            }//GEN-LAST:event_jTable1MouseClicked

            
            private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
                // TODO add your handling code here:
                System.exit(1);
            }//GEN-LAST:event_jMenuItem2ActionPerformed

            private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
                // TODO add your handling code here:
                setConnected(false);
                
                rpcClient.disconnect();
                
            }//GEN-LAST:event_jMenuItem4ActionPerformed

            private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
                // TODO add your handling code here:
                String selected=tables.getValueAt(jTable3.getSelectedRow(), 0).toString();
                //System.out.print(tables.getValueAt(jTable3.getSelectedRow(), 0).toString());
                model1=loadContentTable(selected);
                jTable4.setModel(model1);
                
            }//GEN-LAST:event_jTable3MouseClicked

            private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
                // TODO add your handling code here:
                
                
            }//GEN-LAST:event_jTable4MouseClicked

            private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                // TODO add your handling code here:
                
                String sqlString=sqlCommand.getText().trim();
                executeSQL(sqlString);
                
            }//GEN-LAST:event_jButton1ActionPerformed

            private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                // TODO add your handling code here:
                
                if(!currentTable.equals("")){
                    dumpToXml(currentTable);
                }
            }//GEN-LAST:event_jButton2ActionPerformed
            
   
    //This method loads an XML to a DefaultTableModel
    public  DefaultTableModel getXmlToJTable(String xml) {
        DefaultTableModel mdl=new DefaultTableModel(){

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        try {
            
            currentTable=xml;
            
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            
                factory.setNamespaceAware(true);
               
                factory.setValidating(isValidating);
                factory.setAttribute(SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
                factory.setAttribute( SCHEMA_SOURCE, schemaSource);
                    
                builder = factory.newDocumentBuilder();
                DefaultHandler errCheck =new DefaultHandler() {

                    public void error(SAXParseException e) throws SAXException {
                    System.out.println( "Line " + e.getLineNumber() + "..." );
                    System.out.println( e.getMessage() );
                    System.out.println();
                    
                    throw new SAXException();
                    }
                    };
                    if(!schemaSource.equals("")){
                builder.setErrorHandler(errCheck);
                    
                    }
            Document doc = builder.parse(new java.io.ByteArrayInputStream(xml.getBytes()));
                
            ////////////////////////////////////////////////////////////////////
            //Loading The Columns
            columns=new Vector();
            colLength=new Vector();
            colIsnull=new Vector();
            colAutoinc=new Vector();
            colType=new Vector();
            NodeList cols = doc.getElementsByTagName("column");
            
            for(int i=0;i<cols.getLength();i++)
            {
                Element e= (Element) cols.item(i);
                String name=getValue(e,"name");
                String type=getValue(e,"type");
                
                Integer length=Integer.parseInt(getValue(e,"length"));
                Integer isnull=Integer.parseInt(getValue(e,"null"));
                Boolean autoinc=Boolean.parseBoolean(getValue(e,"autoinc"));
                colLength.add(length);
                colIsnull.add(isnull);
                colAutoinc.add(autoinc);
                colType.add(type);
                String mix=name+" ("+type+")";
                if(name.equals("tablename")){mix=name;}
                columns.add(name);
                //System.out.print(name);
                mdl.addColumn(mix);
                
                
            }
            ////////////////////////////////////////////////////////////////////
            //Loading The TableContents
            
            NodeList rows=doc.getElementsByTagName("row");
            for(int i=0;i<rows.getLength();i++)
            {   Vector rowData=new Vector();
                Element e=(Element)rows.item(i);
            for(int j=0;j<cols.getLength();j++)
            {             
              String cell=getValue(e,(String)columns.get(j));
              //We should check if cell is null because it can be null
              //and if it is null we should add row as ""
                   
              if (cell!=null){
              rowData.add((String)cell);}
              else{rowData.add("");}
            
            }
              mdl.addRow(rowData);
              
            }
            
            return mdl;
           
        } catch (SAXException ex) {
            JOptionPane.showMessageDialog(svSettings,"Error when validating table,\n" +
                    "probably the table xml is corrupted or missing validation file!");
            mdl=new DefaultTableModel();
            return mdl;
        } catch (IOException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
           return mdl;
    
    }
   
    public static String getValue( Element e , String tagName ){
    try{
        //get node lists of a tag name from a Element
        NodeList elements = e.getElementsByTagName( tagName );

        Node node = elements.item( 0 );
        NodeList nodes = node.getChildNodes();
        //find a value whose value is non-whitespace
        String s;
        for( int i=0; i<nodes.getLength(); i++){
            s = ((Node)nodes.item( i )).getNodeValue().trim();
            if(s.equals("") || s.equals("\r")) {
                continue;
            }
            else return s;
        }
        

    }
    catch(Exception ex){
        System.out.println( ex );
        ex.printStackTrace();
    }
    return null;
    }
    //This method sets the Editor Columns
    public  javax.swing.JPanel setColsToEdit(){
            javax.swing.JPanel Panel=new javax.swing.JPanel(new GridBagLayout()); 
            GridBagConstraints c = new GridBagConstraints();
            for(int i=0;i<columns.size();i++){
            
                //System.out.print("\ngetColsToEdit  "+columns.get(i)+"("+colType.get(i)+")");
                c = new GridBagConstraints();
                c.gridy=i;
                c.anchor=GridBagConstraints.WEST;
                c.gridx=0;
                String name=(String)columns.get(i);//+"("+colType.get(i)+")";
                JLabel jl = new JLabel(name);
                
                
                JTextField tf = new JTextField();
                tf.setDocument(new Limiter((Integer)colLength.get(i)));
                if(((Boolean)colAutoinc.get(i))){
                    tf.setEnabled(false);
                    tf.setToolTipText("This cell is not editable because it has autoincrement property!");}

                c.fill=GridBagConstraints.HORIZONTAL;
                Panel.add(jl,c);
                c.gridx=1;
                
                Panel.add(tf,c);
                
            
                
            }JButton btnUpdate=new JButton("Update Row");
                btnUpdate.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateDb(evt);
                    }
                });
                btnUpdate.setActionCommand("update");
                JButton btnDelete=new JButton("Delete Row");
                btnDelete.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateDb(evt);
                    }
                });
                btnDelete.setActionCommand("delete");
                JButton btnInsert=new JButton("Insert Row");
                btnInsert.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateDb(evt);
                    }
                });
                btnInsert.setActionCommand("insert");
                c=new GridBagConstraints();
                c.gridy=columns.size();
                c.gridx=0;
                Panel.add(btnInsert,c);
                c.gridx=1;
                Panel.add(btnUpdate,c);
                c.gridx=2;
                Panel.add(btnDelete,c);
            
         
        return Panel;
    }
    
    public DefaultTableModel loadContentTable(String selected){
            DefaultTableModel mdl = new DefaultTableModel();
        try {
            
            String xml = rpcClient.makeQuery("Select * FROM "+selected);
            mdl=getXmlToJTable(xml);
            dbControl=setColsToEdit();
            jSplitPane2.setRightComponent(dbControl);
            return mdl;
        } catch (XmlRpcException ex) {
           JOptionPane.showMessageDialog(svSettings,errorFormat(ex.getMessage()));
        } catch (IOException ex) {
           JOptionPane.showMessageDialog(svSettings,errorFormat(ex.getMessage()));
        }
            return mdl;
    }
    public void loadListTable(){
        try {
            String xml = rpcClient.getTableList();
            tables=getXmlToJTable(xml);
            tables.fireTableDataChanged();
            jTable2.setModel(tables);
            jTable3.setModel(tables);
            
        } catch (XmlRpcException ex) {
           JOptionPane.showMessageDialog(svSettings,errorFormat(ex.getMessage()));
        } catch (IOException ex) {
            setConnected(false);
           JOptionPane.showMessageDialog(svSettings,errorFormat(ex.getMessage()));
        }
    }
   
    public void showCLSettings(){
        loadCLProperties();
        //jPanel1.setVisible(false);
        svSettings.setVisible(true);
        jPanel1.setVisible(false);
        
        
    }
    public void loadCLProperties(){
        rpcClient.loadSettings();
        svIp.setText(rpcClient.host);
        svPort.setText(rpcClient.port.toString());
        schemaSource=rpcClient.schemaPath;
        svSchema.setText(schemaSource);
        isValidating=rpcClient.isValidating;
        jCheckBox1.setSelected(isValidating);
    }
    public void saveCLProperties(){
    try{
    if(svPort.getText().length()>4)throw new NumberFormatException();
    if(svIp.getText().length()==0)throw new NumberFormatException();
    rpcClient.port=Integer.parseInt(svPort.getText());
    rpcClient.host=svIp.getText();
    schemaSource=svSchema.getText();
    rpcClient.schemaPath=schemaSource;
    isValidating= jCheckBox1.isSelected();
    rpcClient.isValidating=isValidating;
    rpcClient.saveSettings();
    JOptionPane.showMessageDialog(svSettings, "Save Succesfull!");
    svSettings.setVisible(false);
    jPanel1.setVisible(true);
    }catch(NumberFormatException e){
        if(svPort.getText().length()>4){
    JOptionPane.showMessageDialog(svSettings, svPort.getText()+" is not a valid port number!");}
        if(svIp.getText().length()==0){
    JOptionPane.showMessageDialog(svSettings, "The Host Name is empty!");}
    loadCLProperties();
    }
    
    }
    public void setValuesToEdit(){
    
    Component[] c=dbControl.getComponents();
                String selected="";
                GridBagConstraints con=new GridBagConstraints();
                for(int i=0;i<columns.size();i++){
                    
                    selected=model.getValueAt(jTable1.getSelectedRow(), i).toString().trim();
                    
                
                JTextField j=(JTextField)c[(i*2)+1];
                j.setText(selected);
                con.gridx=1;
                con.gridy=i;
                con.fill=GridBagConstraints.HORIZONTAL;
                con.anchor=GridBagConstraints.WEST;
                if(((Boolean)colAutoinc.get(i))){
                    j.setEnabled(false);
                    j.setToolTipText("This cell is not editable because it has autoincrement property!");}
               
                dbControl.remove((i*2)+1);
                dbControl.add(j,con,(i*2)+1);
                
                
                }
    
    }
    public Vector getValuesFromEdit(){
                Vector oldValues = new Vector();
                Vector newValues = new Vector();
                Vector values=new Vector();
                GridBagConstraints con=new GridBagConstraints();
                Component[] c=dbControl.getComponents();
                for(int i=0;i<columns.size();i++){
                //Checking if jTable1.getSelectedRow() is -1, that means
                //we have an INSERT command, and from the jTable1 is not selected nothing
                   if(jTable1.getSelectedRow()!=-1){
                String selected=model.getValueAt(jTable1.getSelectedRow(), i).toString().trim();
                oldValues.add(selected);}
                
                JTextField j=(JTextField)c[(i*2)+1];
                String value=j.getText().trim();
                newValues.add(value);
                j.setText("");
                if(((Boolean)colAutoinc.get(i))){
                    j.setEnabled(false);
                    j.setToolTipText("This cell is not editable because it has autoincrement property!");}
                con.gridx=1;
                con.fill=GridBagConstraints.HORIZONTAL;
                con.anchor=GridBagConstraints.EAST;
                con.gridy=i;
                dbControl.remove((i*2)+1);
                dbControl.add(j,con,(i*2)+1);
                
                }
                values.add(newValues);
                values.add(oldValues);
                return values;    
    }
    public void updateDb(java.awt.event.ActionEvent evt){
        Vector values=getValuesFromEdit();
        //The required datas to make Update
        Vector newValues=(Vector)values.get(0);
        Vector oldValues=(Vector)values.get(1);
        String command=evt.getActionCommand();
        String table=tables.getValueAt(jTable2.getSelectedRow(), 0).toString().trim();
       
        //
        //In case of command is UPDATE
        if (command.equals("update")) {
            try {boolean isUpdatable=true;
                //Getting and casting the new values to dbUpdate
                //The SQL Update's SET and WHERE clause
                Vector newAvail = new Vector();
                Vector oldAvail = new Vector();
                for (int i = 0; i < oldValues.size(); i++) {
                    //If the column has Autoincrement property
                    //can't set it's value, and skipping from SQL syntax
                    if ((Boolean) colAutoinc.get(i) == false) {

                        //Building The SET clause
                        String value = "";
                        //Trying to cast the newValue as a number format
                        //If newValue is not a number format, it will be cast
                        //as a String format and will be put into aphostrophes
                        //like 'String', beacuse SQL accepts only strings in this format
                        if (!newValues.get(i).toString().trim().equals("")) {
                            try {
                                Integer tr = Integer.parseInt(newValues.get(i).toString().trim());
                                value = tr.toString();
                            } catch (NumberFormatException ex) {
                                try {
                                    Double tr = Double.parseDouble(newValues.get(i).toString().trim());
                                    value = tr.toString();
                                } catch (NumberFormatException e) {
                                    value = "'" + newValues.get(i).toString().trim() + "'";
                                }
                            }
                        }
                         
                        if (!value.equals("")) {
                            String s = columns.get(i) + "=" + value.trim();
                            newAvail.add(s);
                        } else {
                            if ((Integer) colIsnull.get(i) > 0) {

                                String s = columns.get(i) + "=null";
                                newAvail.add(s);
                            } else {
                                JOptionPane.showMessageDialog(dbControl, "Attention!\n The " + columns.get(i) + " " + "can't be null,\n the value will not be changed.");
                                isUpdatable=false;
                            }
                        }
                    }
                    
                    //Setting all the available values to the WHERE caluse, 
                    //beacause that's 100% method to update the right row
                    if (!((String) oldValues.get(i)).trim().equals("")) {
                        String s = columns.get(i) + "='" + oldValues.get(i).toString().trim() + "'";
                        oldAvail.add(s);
                    }
                   
                
                }
                
                try{
                    if(isUpdatable){
                String setClause = newAvail.get(0).toString();
                String whereClause = oldAvail.get(0).toString() + " ";

                for (int i = 1; i < newAvail.size(); i++) {
                    setClause = setClause + ", " + newAvail.get(i).toString().trim();
                }
                for (int i = 1; i < oldAvail.size(); i++) {
                    whereClause = whereClause + "AND " + oldAvail.get(i).toString() + " ";
                }
                
                String sql = "UPDATE " + table + " SET " + setClause + " WHERE " + whereClause;
                
                String response=rpcClient.makeUpdate(sql);
                
                //Setting in the jTable the new values
                for(int i=0;i<newValues.size();i++ ){
                if(jTable1.getSelectedRow()!=-1){
                model.setValueAt(newValues.get(i), jTable1.getSelectedRow(), i);
                jTable1.invalidate();}
                }
                jTable1.removeRowSelectionInterval(0, jTable1.getRowCount()-1);
                JOptionPane.showMessageDialog(dbControl, response);
                //System.out.print("\nThe SQL: " + sql + "---END");
                oldAvail=null;
                newAvail=null;
                    }
                }catch(ArrayIndexOutOfBoundsException ex){}
                } catch (XmlRpcException ex) {
                JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            }
            }
            
    //In case of command is DELETE
    if(command.equals("delete")){
            try {
                Vector oldAvail = new Vector();
                for (int i = 0; i < oldValues.size(); i++) {
                    if (!((String) oldValues.get(i)).trim().equals("")) {
                        String s = columns.get(i) + "='" + oldValues.get(i).toString().trim() + "'";
                        oldAvail.add(s);
                    }
                }
                try{
                String whereClause = oldAvail.get(0).toString() + " ";
                for (int i = 1; i < oldAvail.size(); i++) {
                    whereClause = whereClause + "AND " + oldAvail.get(i).toString() + " ";
                }
                String sql = "DELETE FROM " + table + " WHERE " + whereClause;
                rpcClient.makeUpdate(sql);
                model.removeRow(jTable1.getSelectedRow());
                oldAvail = new Vector();
                }catch(ArrayIndexOutOfBoundsException e){}
            } catch (XmlRpcException ex) {
                JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            }
            
    }
    //In case of command is INSERT    
    if(command.equals("insert")){
            try {
                Boolean in=false;
                for(int i=0;i<newValues.size();i++){
                if(!newValues.get(i).toString().trim().equals("")&&(!(Boolean)colAutoinc.get(i))){in=true;}
                }
                if(in){
                    
                Vector newAvail = new Vector();
                Vector newCols = new Vector();
                boolean isInsertable=true;
                for (int i = 0; i < newValues.size(); i++) {
                    if ((Boolean) colAutoinc.get(i) == false) {
                        
                        //Building The INSERT clause
                        String value = "";
                        //Trying to cast the newValue as a number format
                        //If newValue is not a number format, it will be cast
                        //as a String format and will be put into aphostrophes
                        //like 'String', beacuse SQL accepts only strings in this format
                        if (!newValues.get(i).toString().trim().equals("")) {
                            try {
                                Integer tr = Integer.parseInt(newValues.get(i).toString().trim());
                                value = tr.toString();
                            } catch (NumberFormatException ex) {
                                try {
                                    Double tr = Double.parseDouble(newValues.get(i).toString().trim());
                                    value = tr.toString();
                                } catch (NumberFormatException e) {
                                    value = "'" + String.valueOf(newValues.get(i).toString()) + "'";
                                }
                            }
                        }
                        if (!value.equals("")) {
                            newCols.add(columns.get(i));
                            newAvail.add(value);
                        } else {
                            if ((Integer) colIsnull.get(i) > 0) {
                                newCols.add(columns.get(i));
                                newAvail.add("null");
                            } else {
                                JOptionPane.showMessageDialog(dbControl, "Attention!\n The " + columns.get(i) + " " + "can't be null.");
                                isInsertable=false;
                                
                            }
                        }
                    }
                }
                if(isInsertable){
                String setClause = newAvail.get(0).toString();
                String colClause = newCols.get(0).toString();

                for (int i = 1; i < newAvail.size(); i++) {
                    setClause = setClause + ", " + newAvail.get(i).toString().trim();
                    colClause = colClause + ", " + newCols.get(i).toString().trim();
                }
                String sql = "INSERT INTO " + table + "(" + colClause + ") VALUES (" + setClause + ")";
                rpcClient.makeUpdate(sql);
                model.addRow(newValues);
                jTable1.invalidate();
                //System.out.print(sql);
            }}
            } catch (XmlRpcException ex) {
                JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(dbControl, errorFormat(ex.getMessage()));
            }
    }
    }
    public void setConnected(Boolean isConn){
    
        if(isConn){
        jPanel1.setEnabled(true);
        jMenuItem1.setEnabled(false);
        jMenuItem4.setEnabled(true);
        jButton1.setEnabled(true);
        }
        else{
        jPanel1.setEnabled(false);
        jMenuItem1.setEnabled(true);
        jMenuItem4.setEnabled(false);
        model=new DefaultTableModel();
        jTable1.setModel(model);
        jTable1.invalidate();
        jTable3.setModel(model);
        jTable3.invalidate();
        tables=new DefaultTableModel();
        jTable2.setModel(tables);
        jTable2.invalidate();
        jTable4.setModel(tables);
        jTable4.invalidate();
        jButton1.setEnabled(false);
        dbControl.setVisible(false);
        
        
        
        }
    
    }
    public void executeSQL(String sqlString){
    String response;
    boolean isQuery=false;
    String test=sqlString.toLowerCase();
    if(test.startsWith("select")){isQuery=true;}
        if(isQuery){try {
                response=rpcClient.makeQuery(sqlString);
                //JOptionPane.showMessageDialog(jPanel2,"Query is executed succesfully!");
                model1=getXmlToJTable(response);
                jTable4.setModel(model1);
            } catch (XmlRpcException ex) {
                JOptionPane.showMessageDialog(jPanel2,errorFormat(ex.getMessage()));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(jPanel2,errorFormat(ex.getMessage()));
            }
        }
        else{  
                
                try{
                
                try {
                String selected=tables.getValueAt(jTable3.getSelectedRow(), 0).toString();
                response=rpcClient.makeUpdate(sqlString);
                JOptionPane.showMessageDialog(jPanel2,response);
                loadListTable();
                model1=loadContentTable(selected);
                jTable4.setModel(model1);
                }catch(ArrayIndexOutOfBoundsException ex){}
                
            } catch (XmlRpcException ex) {
                JOptionPane.showMessageDialog(jPanel2,errorFormat(ex.getMessage()));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(jPanel2,errorFormat(ex.getMessage()));
            }
}
    
    }
    public String errorFormat(String err){
        String response=new String();
        response=err.replace("java.lang.Exception:", " ");
       
    return response;
    }
    public void dumpToXml(String xml) {
        PrintWriter fw = null;
        try {
            fw = new PrintWriter(new FileOutputStream("dump.xml"));
            fw.write(xml);
            fw.close();
            JOptionPane.showMessageDialog(jPanel2,"The table is written to dump.xml");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel dbControl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTable jTable2;
    public javax.swing.JTable jTable3;
    public javax.swing.JTable jTable4;
    private javax.swing.JTextArea sqlCommand;
    private javax.swing.JButton svCancel;
    public javax.swing.JTextField svIp;
    private javax.swing.JButton svOk;
    private javax.swing.JTextField svPort;
    private javax.swing.JTextField svSchema;
    private javax.swing.JPanel svSettings;
    // End of variables declaration//GEN-END:variables
private static final String SCHEMA_SOURCE = "http://java.sun.com/xml/jaxp/properties/schemaSource";
private static final String SCHEMA_LANGUAGE= "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
private static final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";
static String  schemaSource = "tabla.xsd";

}

